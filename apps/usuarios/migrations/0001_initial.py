# Generated by Django 4.2.23 on 2025-08-26 12:23

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                (
                    "nome",
                    models.CharField(max_length=100, verbose_name="Nome Completo"),
                ),
                (
                    "telefone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de telefone deve estar no formato: '+999999999'. Até 15 dígitos permitidos.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Telefone",
                    ),
                ),
                (
                    "tipo_usuario",
                    models.CharField(
                        choices=[("master", "Master"), ("restrito", "Restrito")],
                        default="restrito",
                        max_length=20,
                        verbose_name="Tipo de Usuário",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="usuarios/avatars/",
                        verbose_name="Avatar",
                    ),
                ),
                (
                    "pode_cadastrar_cliente",
                    models.BooleanField(
                        default=False,
                        help_text="Permite ao usuário cadastrar novos clientes",
                        verbose_name="Pode Cadastrar Cliente",
                    ),
                ),
                (
                    "pode_cadastrar_funcionario",
                    models.BooleanField(
                        default=False,
                        help_text="Permite ao usuário cadastrar novos funcionários",
                        verbose_name="Pode Cadastrar Funcionário",
                    ),
                ),
                (
                    "pode_cadastrar_cargo",
                    models.BooleanField(
                        default=False,
                        help_text="Permite ao usuário criar novos cargos",
                        verbose_name="Pode Cadastrar Cargo",
                    ),
                ),
                (
                    "pode_agendar",
                    models.BooleanField(
                        default=True,
                        help_text="Permite ao usuário criar agendamentos",
                        verbose_name="Pode Agendar",
                    ),
                ),
                (
                    "pode_ver_agendamentos",
                    models.BooleanField(
                        default=True,
                        help_text="Permite ao usuário visualizar agendamentos",
                        verbose_name="Pode Ver Agendamentos",
                    ),
                ),
                (
                    "pode_editar_agendamentos",
                    models.BooleanField(
                        default=False,
                        help_text="Permite ao usuário editar agendamentos",
                        verbose_name="Pode Editar Agendamentos",
                    ),
                ),
                (
                    "pode_cancelar_agendamentos",
                    models.BooleanField(
                        default=False,
                        help_text="Permite ao usuário cancelar agendamentos",
                        verbose_name="Pode Cancelar Agendamentos",
                    ),
                ),
                (
                    "pode_ver_relatorios",
                    models.BooleanField(
                        default=False,
                        help_text="Permite ao usuário acessar relatórios",
                        verbose_name="Pode Ver Relatórios",
                    ),
                ),
                (
                    "pode_gerenciar_configuracoes",
                    models.BooleanField(
                        default=False,
                        help_text="Permite ao usuário alterar configurações do sistema",
                        verbose_name="Pode Gerenciar Configurações",
                    ),
                ),
                (
                    "ultimo_login_ip",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="Último IP de Login"
                    ),
                ),
                (
                    "tentativas_login",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Tentativas de Login Falhadas"
                    ),
                ),
                (
                    "conta_bloqueada_ate",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Conta Bloqueada Até"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuário",
                "verbose_name_plural": "Usuários",
                "ordering": ["nome", "username"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="PerfilUsuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                (
                    "data_nascimento",
                    models.DateField(
                        blank=True, null=True, verbose_name="Data de Nascimento"
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        blank=True,
                        max_length=14,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CPF deve estar no formato: 000.000.000-00",
                                regex="^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$",
                            )
                        ],
                        verbose_name="CPF",
                    ),
                ),
                (
                    "endereco",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Endereço"
                    ),
                ),
                (
                    "cidade",
                    models.CharField(blank=True, max_length=100, verbose_name="Cidade"),
                ),
                (
                    "estado",
                    models.CharField(blank=True, max_length=2, verbose_name="Estado"),
                ),
                (
                    "cep",
                    models.CharField(
                        blank=True,
                        max_length=9,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CEP deve estar no formato: 00000-000",
                                regex="^\\d{5}-\\d{3}$",
                            )
                        ],
                        verbose_name="CEP",
                    ),
                ),
                (
                    "cargo",
                    models.CharField(blank=True, max_length=100, verbose_name="Cargo"),
                ),
                (
                    "departamento",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Departamento"
                    ),
                ),
                (
                    "data_admissao",
                    models.DateField(
                        blank=True, null=True, verbose_name="Data de Admissão"
                    ),
                ),
                (
                    "tema_preferido",
                    models.CharField(
                        choices=[
                            ("light", "Claro"),
                            ("dark", "Escuro"),
                            ("auto", "Automático"),
                        ],
                        default="light",
                        max_length=20,
                        verbose_name="Tema Preferido",
                    ),
                ),
                (
                    "idioma",
                    models.CharField(
                        choices=[
                            ("pt-br", "Português (Brasil)"),
                            ("en", "English"),
                            ("es", "Español"),
                        ],
                        default="pt-br",
                        max_length=10,
                        verbose_name="Idioma",
                    ),
                ),
                (
                    "receber_notificacoes_email",
                    models.BooleanField(
                        default=True, verbose_name="Receber Notificações por Email"
                    ),
                ),
                (
                    "receber_notificacoes_whatsapp",
                    models.BooleanField(
                        default=False, verbose_name="Receber Notificações por WhatsApp"
                    ),
                ),
                (
                    "usuario",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="perfil",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Usuário",
                    ),
                ),
            ],
            options={
                "verbose_name": "Perfil de Usuário",
                "verbose_name_plural": "Perfis de Usuário",
            },
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(
                fields=["tipo_usuario"], name="usuarios_us_tipo_us_c19733_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(
                fields=["is_active"], name="usuarios_us_is_acti_8a269b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usuario",
            index=models.Index(fields=["email"], name="usuarios_us_email_41a027_idx"),
        ),
    ]
