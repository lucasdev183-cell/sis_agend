# Generated by Django 4.2.23 on 2025-08-26 12:23

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("funcionarios", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CategoriaServico",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Excluído em"
                    ),
                ),
                (
                    "nome",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Nome da Categoria"
                    ),
                ),
                ("descricao", models.TextField(blank=True, verbose_name="Descrição")),
                (
                    "cor_identificacao",
                    models.CharField(
                        default="#007bff",
                        help_text="Cor hexadecimal para identificação visual",
                        max_length=7,
                        verbose_name="Cor de Identificação",
                    ),
                ),
                (
                    "icone",
                    models.CharField(
                        blank=True,
                        help_text="Nome do ícone FontAwesome (ex: fa-cut, fa-star)",
                        max_length=50,
                        verbose_name="Ícone",
                    ),
                ),
                (
                    "ordem",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Ordem de Exibição"
                    ),
                ),
            ],
            options={
                "verbose_name": "Categoria de Serviço",
                "verbose_name_plural": "Categorias de Serviço",
                "ordering": ["ordem", "nome"],
            },
        ),
        migrations.CreateModel(
            name="ItemPacote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantidade",
                    models.PositiveIntegerField(
                        default=1,
                        help_text="Quantas vezes este serviço está incluído no pacote",
                        verbose_name="Quantidade",
                    ),
                ),
                (
                    "ordem",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Ordem sugerida para execução dos serviços",
                        verbose_name="Ordem de Execução",
                    ),
                ),
            ],
            options={
                "verbose_name": "Item do Pacote",
                "verbose_name_plural": "Itens do Pacote",
                "ordering": ["ordem", "servico__nome"],
            },
        ),
        migrations.CreateModel(
            name="Servico",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Excluído em"
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=100, verbose_name="Nome do Serviço"),
                ),
                ("descricao", models.TextField(verbose_name="Descrição Detalhada")),
                (
                    "descricao_curta",
                    models.CharField(
                        blank=True,
                        help_text="Descrição breve para exibição em listas",
                        max_length=200,
                        verbose_name="Descrição Resumida",
                    ),
                ),
                (
                    "preco",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Preço"
                    ),
                ),
                (
                    "preco_promocional",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Preço Promocional",
                    ),
                ),
                (
                    "data_inicio_promocao",
                    models.DateField(
                        blank=True, null=True, verbose_name="Data de Início da Promoção"
                    ),
                ),
                (
                    "data_fim_promocao",
                    models.DateField(
                        blank=True, null=True, verbose_name="Data de Fim da Promoção"
                    ),
                ),
                (
                    "duracao",
                    models.PositiveIntegerField(
                        help_text="Duração do serviço", verbose_name="Duração"
                    ),
                ),
                (
                    "tipo_duracao",
                    models.CharField(
                        choices=[
                            ("minutos", "Minutos"),
                            ("horas", "Horas"),
                            ("dias", "Dias"),
                        ],
                        default="minutos",
                        max_length=10,
                        verbose_name="Tipo de Duração",
                    ),
                ),
                (
                    "intervalo_entre_servicos",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Tempo de intervalo necessário após este serviço",
                        verbose_name="Intervalo Entre Serviços (minutos)",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ativo", "Ativo"),
                            ("inativo", "Inativo"),
                            ("promocao", "Promoção"),
                            ("descontinuado", "Descontinuado"),
                        ],
                        default="ativo",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "requer_agendamento",
                    models.BooleanField(
                        default=True,
                        help_text="Se marcado, o serviço só pode ser realizado com agendamento",
                        verbose_name="Requer Agendamento",
                    ),
                ),
                (
                    "disponivel_online",
                    models.BooleanField(
                        default=True,
                        help_text="Se o serviço pode ser agendado online",
                        verbose_name="Disponível para Agendamento Online",
                    ),
                ),
                (
                    "maximo_por_dia",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Número máximo de vezes que o serviço pode ser realizado por dia",
                        null=True,
                        verbose_name="Máximo por Dia",
                    ),
                ),
                (
                    "idade_minima",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Idade mínima necessária para o serviço",
                        null=True,
                        verbose_name="Idade Mínima",
                    ),
                ),
                (
                    "idade_maxima",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Idade máxima permitida para o serviço",
                        null=True,
                        verbose_name="Idade Máxima",
                    ),
                ),
                (
                    "restricoes",
                    models.TextField(
                        blank=True,
                        help_text="Restrições ou contraindicações do serviço",
                        verbose_name="Restrições",
                    ),
                ),
                (
                    "preparacao_necessaria",
                    models.TextField(
                        blank=True,
                        help_text="Instruções de preparação antes do serviço",
                        verbose_name="Preparação Necessária",
                    ),
                ),
                (
                    "cuidados_pos_servico",
                    models.TextField(
                        blank=True,
                        help_text="Cuidados necessários após o serviço",
                        verbose_name="Cuidados Pós-Serviço",
                    ),
                ),
                (
                    "requer_especializacao",
                    models.BooleanField(
                        default=False,
                        help_text="Se o serviço requer funcionário com especialização específica",
                        verbose_name="Requer Especialização",
                    ),
                ),
                (
                    "especializacao_necessaria",
                    models.CharField(
                        blank=True,
                        max_length=200,
                        verbose_name="Especialização Necessária",
                    ),
                ),
                (
                    "imagem",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="servicos/imagens/",
                        verbose_name="Imagem do Serviço",
                    ),
                ),
                (
                    "cor_identificacao",
                    models.CharField(
                        blank=True,
                        help_text="Cor hexadecimal para identificação visual (herda da categoria se vazio)",
                        max_length=7,
                        verbose_name="Cor de Identificação",
                    ),
                ),
                (
                    "palavras_chave",
                    models.CharField(
                        blank=True,
                        help_text="Palavras-chave separadas por vírgula para busca",
                        max_length=500,
                        verbose_name="Palavras-chave",
                    ),
                ),
                (
                    "destaque",
                    models.BooleanField(
                        default=False,
                        help_text="Destacar este serviço na página principal",
                        verbose_name="Serviço em Destaque",
                    ),
                ),
                (
                    "ordem_exibicao",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Ordem de Exibição"
                    ),
                ),
                (
                    "categoria",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="servicos",
                        to="servicos.categoriaservico",
                        verbose_name="Categoria",
                    ),
                ),
                (
                    "funcionarios_habilitados",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Funcionários que podem realizar este serviço",
                        related_name="servicos_habilitados",
                        to="funcionarios.funcionario",
                        verbose_name="Funcionários Habilitados",
                    ),
                ),
            ],
            options={
                "verbose_name": "Serviço",
                "verbose_name_plural": "Serviços",
                "ordering": ["categoria__ordem", "ordem_exibicao", "nome"],
            },
        ),
        migrations.CreateModel(
            name="PacoteServico",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Excluído em"
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=100, verbose_name="Nome do Pacote"),
                ),
                ("descricao", models.TextField(verbose_name="Descrição do Pacote")),
                (
                    "preco_total",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Preço Total do Pacote",
                    ),
                ),
                (
                    "desconto_percentual",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Desconto aplicado sobre o valor individual dos serviços",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Desconto (%)",
                    ),
                ),
                (
                    "validade_dias",
                    models.PositiveIntegerField(
                        default=365,
                        help_text="Número de dias para utilizar todos os serviços do pacote",
                        verbose_name="Validade (dias)",
                    ),
                ),
                (
                    "imagem",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="servicos/pacotes/",
                        verbose_name="Imagem do Pacote",
                    ),
                ),
                (
                    "ativo",
                    models.BooleanField(default=True, verbose_name="Pacote Ativo"),
                ),
                (
                    "servicos",
                    models.ManyToManyField(
                        related_name="pacotes",
                        through="servicos.ItemPacote",
                        to="servicos.servico",
                        verbose_name="Serviços Inclusos",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pacote de Serviços",
                "verbose_name_plural": "Pacotes de Serviços",
                "ordering": ["nome"],
            },
        ),
        migrations.AddField(
            model_name="itempacote",
            name="pacote",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="itens_pacote",
                to="servicos.pacoteservico",
                verbose_name="Pacote",
            ),
        ),
        migrations.AddField(
            model_name="itempacote",
            name="servico",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="servicos.servico",
                verbose_name="Serviço",
            ),
        ),
        migrations.AddIndex(
            model_name="servico",
            index=models.Index(fields=["status"], name="servicos_se_status_d75c30_idx"),
        ),
        migrations.AddIndex(
            model_name="servico",
            index=models.Index(
                fields=["categoria"], name="servicos_se_categor_3d85d4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servico",
            index=models.Index(
                fields=["destaque"], name="servicos_se_destaqu_8b9c35_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="servico",
            index=models.Index(
                fields=["disponivel_online"], name="servicos_se_disponi_53bebd_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="itempacote",
            unique_together={("pacote", "servico")},
        ),
    ]
