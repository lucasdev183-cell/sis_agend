# Generated by Django 4.2.23 on 2025-08-26 12:23

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Cliente",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Excluído em"
                    ),
                ),
                (
                    "nome",
                    models.CharField(max_length=100, verbose_name="Nome/Razão Social"),
                ),
                (
                    "nome_fantasia",
                    models.CharField(
                        blank=True,
                        help_text="Para pessoa jurídica",
                        max_length=100,
                        verbose_name="Nome Fantasia",
                    ),
                ),
                (
                    "tipo_cliente",
                    models.CharField(
                        choices=[
                            ("pessoa_fisica", "Pessoa Física"),
                            ("pessoa_juridica", "Pessoa Jurídica"),
                        ],
                        default="pessoa_fisica",
                        max_length=20,
                        verbose_name="Tipo de Cliente",
                    ),
                ),
                (
                    "email",
                    models.EmailField(blank=True, max_length=254, verbose_name="Email"),
                ),
                (
                    "telefone",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de telefone deve estar no formato: '+999999999'. Até 15 dígitos permitidos.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Telefone Principal",
                    ),
                ),
                (
                    "whatsapp",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de WhatsApp deve estar no formato: '+999999999'. Até 15 dígitos permitidos.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="WhatsApp",
                    ),
                ),
                (
                    "telefone_secundario",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de telefone deve estar no formato: '+999999999'. Até 15 dígitos permitidos.",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Telefone Secundário",
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        blank=True,
                        max_length=14,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CPF deve estar no formato: 000.000.000-00",
                                regex="^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$",
                            )
                        ],
                        verbose_name="CPF",
                    ),
                ),
                ("rg", models.CharField(blank=True, max_length=20, verbose_name="RG")),
                (
                    "data_nascimento",
                    models.DateField(
                        blank=True, null=True, verbose_name="Data de Nascimento"
                    ),
                ),
                (
                    "sexo",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Masculino"),
                            ("F", "Feminino"),
                            ("O", "Outro"),
                            ("N", "Não informar"),
                        ],
                        max_length=1,
                        verbose_name="Sexo",
                    ),
                ),
                (
                    "cnpj",
                    models.CharField(
                        blank=True,
                        max_length=18,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CNPJ deve estar no formato: 00.000.000/0000-00",
                                regex="^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$",
                            )
                        ],
                        verbose_name="CNPJ",
                    ),
                ),
                (
                    "inscricao_estadual",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Inscrição Estadual"
                    ),
                ),
                (
                    "inscricao_municipal",
                    models.CharField(
                        blank=True, max_length=20, verbose_name="Inscrição Municipal"
                    ),
                ),
                (
                    "endereco",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="Endereço"
                    ),
                ),
                (
                    "numero",
                    models.CharField(blank=True, max_length=10, verbose_name="Número"),
                ),
                (
                    "complemento",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Complemento"
                    ),
                ),
                (
                    "bairro",
                    models.CharField(blank=True, max_length=100, verbose_name="Bairro"),
                ),
                (
                    "cidade",
                    models.CharField(blank=True, max_length=100, verbose_name="Cidade"),
                ),
                (
                    "estado",
                    models.CharField(blank=True, max_length=2, verbose_name="Estado"),
                ),
                (
                    "cep",
                    models.CharField(
                        blank=True,
                        max_length=9,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="CEP deve estar no formato: 00000-000",
                                regex="^\\d{5}-\\d{3}$",
                            )
                        ],
                        verbose_name="CEP",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ativo", "Ativo"),
                            ("inativo", "Inativo"),
                            ("bloqueado", "Bloqueado"),
                            ("vip", "VIP"),
                        ],
                        default="ativo",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "data_primeiro_atendimento",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Data do Primeiro Atendimento",
                    ),
                ),
                (
                    "data_ultimo_atendimento",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Data do Último Atendimento"
                    ),
                ),
                (
                    "observacoes",
                    models.TextField(blank=True, verbose_name="Observações"),
                ),
                (
                    "preferencias",
                    models.TextField(
                        blank=True,
                        help_text="Preferências específicas do cliente",
                        verbose_name="Preferências",
                    ),
                ),
                (
                    "como_conheceu",
                    models.CharField(
                        blank=True,
                        help_text="Indicação, internet, propaganda, etc.",
                        max_length=100,
                        verbose_name="Como Conheceu a Empresa",
                    ),
                ),
                (
                    "aceita_marketing",
                    models.BooleanField(
                        default=True,
                        help_text="Aceita receber promoções e novidades",
                        verbose_name="Aceita Receber Marketing",
                    ),
                ),
                (
                    "aceita_whatsapp",
                    models.BooleanField(
                        default=True,
                        help_text="Aceita receber mensagens via WhatsApp",
                        verbose_name="Aceita WhatsApp",
                    ),
                ),
                (
                    "foto",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="clientes/fotos/",
                        verbose_name="Foto",
                    ),
                ),
            ],
            options={
                "verbose_name": "Cliente",
                "verbose_name_plural": "Clientes",
                "ordering": ["nome"],
            },
        ),
        migrations.CreateModel(
            name="HistoricoContato",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Criado em"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Atualizado em"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Ativo")),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Excluído em"
                    ),
                ),
                (
                    "tipo_contato",
                    models.CharField(
                        choices=[
                            ("telefone", "Telefone"),
                            ("whatsapp", "WhatsApp"),
                            ("email", "Email"),
                            ("presencial", "Presencial"),
                            ("sms", "SMS"),
                        ],
                        max_length=20,
                        verbose_name="Tipo de Contato",
                    ),
                ),
                ("assunto", models.CharField(max_length=200, verbose_name="Assunto")),
                ("descricao", models.TextField(verbose_name="Descrição do Contato")),
                (
                    "data_contato",
                    models.DateTimeField(verbose_name="Data/Hora do Contato"),
                ),
                (
                    "anexos",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="clientes/contatos/",
                        verbose_name="Anexos",
                    ),
                ),
                (
                    "cliente",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="historico_contatos",
                        to="clientes.cliente",
                        verbose_name="Cliente",
                    ),
                ),
            ],
            options={
                "verbose_name": "Histórico de Contato",
                "verbose_name_plural": "Históricos de Contato",
                "ordering": ["-data_contato"],
            },
        ),
    ]
